pragma solidity ^0.8.0;

contract VotingSystem {
    struct Voter {
        bool voted;
        uint256 voteWeight;
        uint256 voteIndex;
    }

    struct Candidate {
        string name;
        uint256 voteCount;
    }

    address public owner;
    mapping(address => Voter) public voters;
    Candidate[] public candidates;

    event VoteCast(address indexed voter, uint256 indexed candidateIndex);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only contract owner can call this function");
        _;
    }

    constructor(string[] memory _candidateNames) {
        owner = msg.sender;
        for (uint256 i = 0; i < _candidateNames.length; i++) {
            candidates.push(Candidate({
                name: _candidateNames[i],
                voteCount: 0
            }));
        }
    }

    function authorizeVoter(address _voter, uint256 _voteWeight) external onlyOwner {
        voters[_voter].voteWeight = _voteWeight;
    }

    function vote(uint256 _candidateIndex) external {
        require(!voters[msg.sender].voted, "You have already voted");
        require(_candidateIndex < candidates.length, "Invalid candidate index");

        Voter storage sender = voters[msg.sender];
        sender.voted = true;
        sender.voteIndex = _candidateIndex;

        candidates[_candidateIndex].voteCount += sender.voteWeight;

        emit VoteCast(msg.sender, _candidateIndex);
    }

    function winningCandidate() public view returns (string memory) {
        uint256 winningVoteCount = 0;
        uint256 winningCandidateIndex = 0;

        for (uint256 i = 0; i < candidates.length; i++) {
            if (candidates[i].voteCount > winningVoteCount) {
                winningVoteCount = candidates[i].voteCount;
                winningCandidateIndex = i;
            }
        }

        return candidates[winningCandidateIndex].name;
    }
}
